name: Cloudbeat-CI

on:
  # pull_request:
  #   branches:
  #     - main
  #     - '[0-9]+.[0-9]+'
  #   types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - "tests-ci-v2"
env:
  K8S_MANIFEST_DIR: deploy/k8s/kustomize/base
  GO_VERSION: 1.18.2

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: cache go dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      
      - name: build cloudbeat
        run: make

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Build dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}
      
      - name: Build cloudbeat-docker
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: cloudbeat:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          outputs: type=docker,dest=/tmp/cloudbeat-${{ github.sha }}-${{ github.run_number }}.tar

      - name: Build pytest-docker
        uses: docker/build-push-action@v2
        with:
          context: ./tests/.
          push: false
          tags: cloudbeat-test:latest
          cache-from: type=local,mode=max,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          outputs: type=docker,dest=/tmp/pytest-${{ github.sha }}-${{ github.run_number }}.tar
      
      - name: Cache docker images
        uses: actions/cache@v2
        with:
          path: /tmp/*.tar
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-dockers-cache-

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  Integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        test-target: [file_system_rules, k8s_object_rules, process_api_server_rules, process_controller_manager_rules, process_etcd_rules process_kubelet_rules, process_scheduler_rules]
      fail-fast: false
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - uses: azure/setup-helm@v1
        id: install
      
      - uses: extractions/setup-just@v1

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
        with:
          config: deploy/k8s/kind/kind-config.yml
          cluster_name: kind-mono 

      - name: Wait for build to succeed
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          check-name: Build
          ref: ${{ github.ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allowed-conclusions: success
          wait-interval: 10

      - name: Cache docker images
        uses: actions/cache@v2
        with:
          path: /tmp/*.tar
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Load images to kind
        run: |
          kind load image-archive /tmp/cloudbeat-${{ github.sha }}-${{ github.run_number }}.tar --name=kind-mono & kind load image-archive /tmp/pytest-${{ github.sha }}-${{ github.run_number }}.tar --name=kind-mono

#          rm -rf /tmp/*.tar

      - name: Deploy tests Helm chart
        id: deploy_helm
        run: |
          just deploy-tests-helm-ci ${{ matrix.test-target }}

      - name: Run Tests
        id: run_tests 
        run: |
          just run-tests-ci
          result_code=${PIPESTATUS[0]}
          SUMMARY=$(cat test.log | sed -n '/summary/,/===/p')
          echo "summary<<EOF" >> "$GITHUB_ENV"
          echo "$SUMMARY" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
          exit $result_code

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        # if: steps.deploy_helm.outcome == 'failure'
        if: failure()
        with:
          limit-access-to-actor: true
