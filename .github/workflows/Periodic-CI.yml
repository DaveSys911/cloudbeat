name: Periodic-CI

on:
  # On demand execution of workflow will run all suites.
  workflow_dispatch:
    inputs:
      test-targets:
        required: true
        description: 'Specify test markers to run'
        default: '[\"pre_merge\", \"file_system_rules\", \"k8s_object_rules\", \"process_api_server_rules\", \"process_controller_manager_rules\", \"process_etcd_rules\", \"process_kubelet_rules\", \"process_scheduler_rules\"]'

  schedule:
    # Nightly job. Running every day at 2 am
    - cron: '00 02 * * *'

    # Weekly job running every saturday at 2 am
    - cron: '00 02 * * 6'

env:
  K8S_MANIFEST_DIR: deploy/k8s/kustomize/base
  GO_VERSION: 1.18.2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CONTAINER_SUFFIX: ${{ github.run_id }}

jobs:
  Setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    timeout-minutes: 15
    steps:
    - id: Nightly
      if: github.event_name == 'schedule' && github.event.schedule == '00 02 * * *'
      env:
        TEST_TARGETS: '"[\"pre_merge\", \"file_system_rules\", \"k8s_object_rules\", \"process_api_server_rules\", \"process_controller_manager_rules\", \"process_etcd_rules\", \"process_kubelet_rules\", \"process_scheduler_rules\"]"'
      run: echo "TEST_MATRIX=${TEST_TARGETS}" >> $GITHUB_ENV
    - id: Weekly
      if: github.event_name == 'schedule' && github.event.schedule != '00 02 * * 6'
      env:
        TEST_TARGETS: '[\"pre_merge\", \"file_system_rules\", \"k8s_object_rules\", \"process_api_server_rules\", \"process_controller_manager_rules\", \"process_etcd_rules\", \"process_kubelet_rules\", \"process_scheduler_rules\"]'
      run: echo "TEST_MATRIX=${TEST_TARGETS}" >> $GITHUB_ENV
    - id: Push
      if: github.event_name == 'push'
      env:
        TEST_TARGETS: '[\"pre_merge\", \"file_system_rules\"]'
      run: |
        echo "TEST_MATRIX=$TEST_TARGETS" >> $GITHUB_ENV
    - id: Dispatch
      if: github.event_name == 'workflow_dispatch'
      env:
        TEST_TARGETS: ${{ github.event.inputs.test-targets }}
      run: echo "TEST_MATRIX=${TEST_TARGETS}" >> $GITHUB_ENV
    - id: set-matrix
      run: |
        echo "::set-output name=matrix::${{ env.TEST_MATRIX}}"

  Build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
            
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: cache go dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      
      - name: build cloudbeat
        run: make

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Build dependencies
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.workflow }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build cloudbeat-docker
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: cloudbeat:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          outputs: type=docker,dest=/tmp/cloudbeat-${{ env.CONTAINER_SUFFIX }}.tar

      - name: Build pytest-docker
        uses: docker/build-push-action@v2
        with:
          context: ./tests/.
          push: false
          tags: cloudbeat-test:latest
          cache-from: type=local,mode=max,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          outputs: type=docker,dest=/tmp/pytest-${{ env.CONTAINER_SUFFIX }}.tar
      
      - name: Cache docker images
        uses: actions/cache@v2
        with:
          path: /tmp/*.tar
          key: ${{ runner.os }}-dockers-cache-${{ env.CONTAINER_SUFFIX }}
          restore-keys: |
            ${{ runner.os }}-dockers-cache-${{ env.CONTAINER_SUFFIX }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  Test_Matrix:
    needs: ['Build', 'Setup']
    strategy:
      fail-fast: false
      matrix:
        # test-target: [file_system_rules, k8s_object_rules, process_api_server_rules, process_controller_manager_rules, process_etcd_rules, process_kubelet_rules, process_scheduler_rules]
        # test-target: [pre_merge, file_system_rules ]
        test-target: ${{fromJson(needs.Setup.outputs.matrix)}}
    name: ${{ matrix.test-target }}-tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - uses: azure/setup-helm@v1
        id: install
      
      - uses: extractions/setup-just@v1

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
        with:
          config: deploy/k8s/kind/kind-config.yml
          cluster_name: kind-mono 

      # - name: Wait for build to succeed
      #   uses: lewagon/wait-on-check-action@v1.0.0
      #   with:
      #     check-name: Build
      #     running-workflow-name: ${{ github.workflow }}
      #     ref: ${{ github.ref }}
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     allowed-conclusions: success
      #     wait-interval: 10

      - name: Cache docker images
        uses: actions/cache@v2
        with:
          path: /tmp/*.tar
          key: ${{ runner.os }}-dockers-cache-${{ env.CONTAINER_SUFFIX }}
          restore-keys: |
            ${{ runner.os }}-dockers-cache-

      - name: Load images to kind
        run: |
          kind load image-archive /tmp/cloudbeat-${{ env.CONTAINER_SUFFIX }}.tar --name=kind-mono & kind load image-archive /tmp/pytest-${{ env.CONTAINER_SUFFIX }}.tar --name=kind-mono

      - name: Deploy tests Helm chart
        id: deploy_helm
        run: |
          just deploy-tests-helm-ci ${{ matrix.test-target }}

      - name: Run Tests
        id: run_tests 
        run: |
          just run-tests-ci
          result_code=${PIPESTATUS[0]}
          SUMMARY=$(cat test.log | sed -n '/summary/,/===/p')
          echo "summary<<EOF" >> "$$GITHUB_ENV"
          echo "$SUMMARY" >> "$$GITHUB_ENV"
          echo "EOF" >> "$$GITHUB_ENV"
          exit $result_code

      - name: clear cache
        id: clear_cache
        if: success()
        run: rm -rf /tmp/${{ env.CONTAINER_SUFFIX }}}.tar

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: allure_results-${{ matrix.test-target}}
          path: tests/allure/results/

##  Add cache purge on successful run https://github.com/elastic/security-team/issues/3936
  publish_results:
    name: Publish Results
    needs: Test_Matrix
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Extract Artifacts
        run: |
          mkdir -p tests/allure/results
          find artifacts/ -type f -print0 | xargs -0 mv -t tests/allure/results

      - name: Publish allure report
        if: always()
        uses: andrcuns/allure-publish-action@v1.0.1
        with:
          storageType: s3
          resultsGlob: "tests/allure/results/*"
          updatePr: actions
          collapseSummary: false
          summary: suites
          summaryTableType: markdown
          copyLatest: true
          bucket: csp-allure-reports
          prefix: allure_reports/cloudbeat/${{ github.ref_name }}
          ignoreMissingResults: true

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: failure()
        with:
          limit-access-to-actor: true